# Sphaeroptica-Orthanc
[Orthanc](https://www.orthanc-server.com/) Plugin  for Sphaeroptica

Orthanc is a lightweight and standalone open-source DICOM server.  
This server provides a RESTful API architecture making it easy to send a receive data from it.
It also has a plugin mechanism to add new modules and extend the RESTful API (as adding your own viewer or new protocols) that we will be using here. 

## Clone the project

After cloning the project, do not forget to fetch the data from the submodules frontend and photogrammetry.
```
git submodule update --init
```

## Install Orthanc

Follow the [instruction manual](https://orthanc.uclouvain.be/book/users/cookbook.html) available on their website.  
The only requirement is to install the python plugin with it.  
If you are using Docker, this means using the image `jodogne/orthanc-python`

## Configuring Orthanc

For this you must update the configuration json file :
```json
"Plugins" : [ 
    "libOrthancPython.so"
],
"ServeFolders" : {
    "Extensions": {
        ".ico": "image/x-icon"
    },
    "Folders": {
        "/sphaeroptica/ui/" : "/path/to/sphaeroptica/frontend/public"
    }
},
"PythonScript" : "/path/to/plugin.py",
```

* The plugin [ServeFolder](https://orthanc.uclouvain.be/book/plugins/serve-folders.html?highlight=servefolders) allows to directly access the view files (html, css, js)
* The plugin [PythonScript](https://orthanc.uclouvain.be/book/plugins/python.html?highlight=python%20plugin) indicates where the python scripts is located.

Sphaeroptica also needs additional data to work properly.  
For that we will use different core-mechanism to add information on a DICOM entity:

* [User-defined metadata](https://orthanc.uclouvain.be/book/faq/features.html?highlight=user%20defined%20metadata#user-defined-metadata)
* [User-defined attachment](https://orthanc.uclouvain.be/book/faq/features.html?highlight=user%20defined%20metadata#user-defined-attachments)
* [Private Tags](https://orthanc.uclouvain.be/book/users/advanced-rest.html?highlight=private%20tags#creating-dicom-instance-with-private-tags)
```
"UserMetadata": {
    "shortcut_F" : 1024,
    "shortcut_P" : 1025,
    "shortcut_L" : 1026,
    "shortcut_R" : 1027,
    "shortcut_I" : 1028,
    "shortcut_S" : 1029
},

"UserContentType": {
    "thumbnail" : [1024, "image/jpeg"],
},

"LoadPrivateDictionary" : true,

"Dictionary" : {
    "4231,0010" : [ "LO", "PrivateCreatorForSphaeroptica", 1, 1, "Sphaeroptica" ],
    "4231,1027"   : [ "FD", "IntrinsicsMatrix", 4, 4, "Sphaeroptica"],
    "4231,1028"   : [ "FD", "RotationMatrix", 9, 9, "Sphaeroptica"],
    "4231,1029"   : [ "FD", "TranslationMatrix", 3, 3, "Sphaeroptica"],
    "4231,1030"   : [ "FD", "DistortionCoefficients", 4, 8, "Sphaeroptica"]
},
```

As Metadata, at a series level, Shortcut_* points to the UUID of the specific view (Front, Posterior, Left, Right, Inferior, Superior)

As Attachment, each view has a thumbnail, specifically used for the Camera Viewer as the pictures are too big in size to have a fluid virtual camera.

As Private Tags, each instance has the calibration data :
* PrivateCreator "Sphaeroptica" as required for the creation of private tags
* the intrinsic matrix (fx, fy, cx, cy in IntrinsicMatrix)
* the extrinsic matrix (RotationMatrix + TranslationMatrix)
* the distortion coefficients (k1,k2,p1,p2,k3 ...)


## Start Orthanc with Sphaeroptica

### Build Production of Vue Frontend
```
npm run install
npm run build
```

### Create Docker Image
```
docker build -t orthanc-sphaeroptica:latest .
```

This will create a new Docker image, based on [jodogne/orthanc-python](https://hub.docker.com/r/jodogne/orthanc-python/tags) and install the necessary libraries to it.

### Start the Orthanc Server with Sphaeroptica Plugin
```
docker run -p 4242:4242 -p 8042:8042 --rm -v /path/to/Configuration.json:/etc/orthanc/orthanc.json:ro -v /path/to/python-plugin.py:/etc/orthanc/python/plugin.py -v /path/to/Storage/:/var/lib/orthanc/db/ orthanc-sphaeroptica
```



### Development

There is a Flask App that connects to the Orthanc server through API requests if needed for development purposes.

Just change the .env file in *frontend* :
```
# REPO TYPE
VITE_REPOSITORY=DATA

# Orthanc provider
#VITE_BACKEND_TYPE=ORTHANC
#VITE_BACKEND_URL=http://localhost:8042

# WEB provider
VITE_BACKEND_TYPE=WEB
VITE_BACKEND_URL=http://localhost:5000
```

It will connect to the Flask server (that connects to the Orthanc API) instead.